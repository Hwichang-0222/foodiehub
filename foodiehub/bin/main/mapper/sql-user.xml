<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.embed.mapper.UserMapper">

    <!-- 공통 매핑 -->
    <resultMap id="UserResultMap" type="org.embed.dto.UserDTO">
        <id property="id" column="id" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="birthDate" column="birth_date" />
        <result property="gender" column="gender" />
        <result property="phone" column="phone" />
        <result property="address" column="address" />
        <result property="profileImageUrl" column="profile_image_url" />
        <result property="provider" column="provider" />
        <result property="role" column="role" />
        <result property="isDeleted" column="is_deleted" />
        <result property="createdAt" column="created_at" />
    </resultMap>

    <!-- 1. 전체 유저 조회 -->
    <select id="findAllActiveUsers" resultMap="UserResultMap">
        SELECT * FROM user
        WHERE is_deleted = 'N'
        ORDER BY id DESC
    </select>

    <!-- 2. 단일 조회 (id 기준) -->
    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT * FROM user
        WHERE id = #{id}
    </select>

    <!-- 3. 이메일로 조회 -->
    <select id="findByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT * FROM user
        WHERE email = #{email}
    </select>

    <!-- 4. 새 유저 등록 -->
    <insert id="insertUser" parameterType="org.embed.dto.UserDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (
            email, password, name, birth_date, gender, phone, address,
            profile_image_url, provider, role, is_deleted, created_at
        ) VALUES (
            #{email}, #{password}, #{name}, #{birthDate}, #{gender}, #{phone}, #{address},
            #{profileImageUrl}, #{provider}, #{role}, 'N', NOW()
        )
    </insert>

    <!-- 5. 유저 정보 수정 -->
    <update id="updateUser" parameterType="org.embed.dto.UserDTO">
        UPDATE user
        SET
            password = #{password},
            name = #{name},
            birth_date = #{birthDate},
            gender = #{gender},
            phone = #{phone},
            address = #{address},
            profile_image_url = #{profileImageUrl},
            provider = #{provider},
            role = #{role}
        WHERE id = #{id}
    </update>

    <!-- 6. 논리 삭제 -->
    <update id="softDeleteUser" parameterType="long">
        UPDATE user
        SET is_deleted = 'Y'
        WHERE id = #{id}
    </update>

    <!-- 7. 관리자 전용: 권한(Role) 변경 -->
    <update id="updateUserRole">
        UPDATE user
        SET role = #{role}
        WHERE id = #{id}
    </update>

    <!-- 8. 이메일 중복 확인 -->
    <select id="countByEmail" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM user
        WHERE email = #{email}
          AND is_deleted = 'N'
    </select>

    <!-- 9. 로그인 검증 -->
    <select id="validateLogin" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE email = #{email}
          AND password = #{password}
          AND is_deleted = 'N'
    </select>

    <!-- 10. 권한별 유저 조회 -->
    <select id="findUsersByRole" parameterType="string" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE role = #{role}
          AND is_deleted = 'N'
        ORDER BY created_at DESC
    </select>

</mapper>
